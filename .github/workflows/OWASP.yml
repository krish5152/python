name: OWASP Dependency-Check for Python

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  security-events: write
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Step 3: Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Download and unzip OWASP Dependency-Check
      - name: Install OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.2.1/dependency-check-8.2.1-release.zip
          mkdir dependency-check
          unzip dependency-check-8.2.1-release.zip -d dependency-check
          chmod +x dependency-check/bin/dependency-check.sh

      # Step 5: Run OWASP Dependency-Check for Python dependencies
      - name: Run OWASP Dependency-Check
        run: |
          dependency-check/bin/dependency-check.sh \
          --project "PythonApp" \
          --scan . \
          --out dependency-check-report \
          --format "HTML" \
          --disableOssIndex \
          --disableRetireJS

      # Step 6: Upload the report as an artifact
      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report/

      # Optional: Fail the build if critical vulnerabilities are found
      - name: Fail on Critical Vulnerabilities
        run: |
          if grep -q 'CRITICAL' dependency-check-report/dependency-check-report.html; then
            echo "Critical vulnerabilities found!"
            exit 1
          fi
